{"version":3,"sources":["views/Home.js","views/Repo.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","useEffect","a","axios","url","process","method","fetchData","className","to","Repo","classe","lang","useState","reposi","setReposi","items","data","pre","ft","i","key","rowSwifts","rowJavascripts","rowRubies","rowPhps","rowPythons","console","log","push","href","target","rel","repo","owner","stars","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4SA2BeA,MAtBf,SAAeC,GAaX,OAXAC,qBAAU,WAQN,OAPe,uCAAG,sBAAAC,EAAA,sEACRC,IAAM,CACRC,IAAKC,mCACLC,OAAQ,QAHE,2CAAH,oDAMfC,GACO,eACR,IAGC,yBAAKC,UAAU,QACZ,kBAAC,IAAD,CAAMC,GAAG,SACL,4BAAQD,UAAU,eAAlB,uB,gBCoDAE,MArEf,SAAeV,GAAQ,IAIfW,EAAQC,EAJM,EAEUC,qBAFV,mBAEXC,EAFW,KAEHC,EAFG,KAGZC,EAAQ,GAGdf,qBAAU,WASN,OARe,uCAAG,8BAAAC,EAAA,sEACOC,IAAM,CACvBC,IAAKC,6BACLC,OAAQ,QAHE,gBACPW,EADO,EACPA,KAIPF,GAAU,SAAAG,GAAG,sBAASA,EAAT,CAAcJ,OAAQG,OALrB,2CAAH,oDAOfV,GACO,eACR,IAGH,IAAK,IAAIY,EAAG,EAAGA,EAAG,EAAGA,IACjB,IAAK,IAAIC,EAAE,EAAGA,EAAE,EAAGA,IACf,IAAI,IAAIC,KAAOP,EAAQ,CACnB,OAAQK,GACJ,KAAK,EACDR,EAASG,EAAOO,GAAKC,UAAUF,GAC/BR,EAAO,QACP,MACJ,KAAK,EACDD,EAASG,EAAOO,GAAKE,eAAeH,GACpCR,EAAO,aACP,MACJ,KAAK,EACDD,EAASG,EAAOO,GAAKG,UAAUJ,GAC/BR,EAAO,OACP,MACJ,KAAK,EACDD,EAASG,EAAOO,GAAKI,QAAQL,GAC7BR,EAAO,MACP,MACJ,KAAK,EACDD,EAASG,EAAOO,GAAKK,WAAWN,GAChCR,EAAO,SACP,MACJ,QACIe,QAAQC,IAAI,sBAGpBZ,EAAMa,KACN,yBAAKrB,UAAU,SACX,uBAAGsB,KAAMnB,EAAOP,IAAK2B,OAAO,SAASC,IAAI,uBAAuBrB,EAAOsB,MACvE,2BAAG,qDAA8BrB,GACjC,2BAAG,sCAAeD,EAAOuB,OACzB,2BAAG,sCAAevB,EAAOwB,SAOzC,OACI,oCACI,yBAAK3B,UAAU,YACX,wBAAIA,UAAU,aAAd,wCACA,yBAAKA,UAAU,SAASQ,MCnDzBoB,MAXf,WACE,OACE,kBAAC,IAAD,KACE,yBAAK5B,UAAU,OACb,kBAAC,IAAD,CAAO6B,KAAK,IAAIC,OAAO,EAAMC,UAAWxC,IACxC,kBAAC,IAAD,CAAOsC,KAAK,QAAQE,UAAW7B,OCEnB8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.4af65136.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom'\nimport './../App.css';\nimport axios from 'axios';\n\nfunction Home (props) {\n\n    useEffect(() => {\n        const fetchData = async () => {\n            await axios({\n                url: process.env.REACT_APP_API_GIT,\n                method: 'get'\n              })\n        }\n        fetchData();\n        return () => { };\n    }, []);\n\n    return (\n        <div className=\"home\">\n           <Link to=\"/repo\">\n               <button className=\"Main-button\">See repositories</button>\n           </Link> \n        </div>\n    )\n}\n\nexport default Home;","import React, { useState, useEffect } from 'react';\nimport './../App.css';\nimport axios from 'axios';\n\nfunction Repo (props) {\n\n    const [reposi, setReposi] = useState();\n    const items = [];\n    var classe, lang;\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const {data} = await axios({\n                url: process.env.REACT_APP_API_REPO,\n                method: 'get'\n              })\n            setReposi(pre => ({...pre, reposi: data}));\n        }\n        fetchData();\n        return () => { };\n    }, []);\n\n\n    for (var ft=0; ft<5; ft++) { \n        for (var i=0; i<3; i++){\n            for(var key in reposi) {\n                switch (ft) {\n                    case 0:\n                        classe = reposi[key].rowSwifts[i];\n                        lang = 'Swift';\n                        break;\n                    case 1:\n                        classe = reposi[key].rowJavascripts[i];\n                        lang = 'JavaScript';\n                        break;\n                    case 2:\n                        classe = reposi[key].rowRubies[i];\n                        lang = 'Ruby';\n                        break;\n                    case 3:\n                        classe = reposi[key].rowPhps[i];\n                        lang = 'PHP';\n                        break;\n                    case 4:\n                        classe = reposi[key].rowPythons[i];\n                        lang = 'Python';\n                        break;\n                    default:\n                        console.log(\"Different language\");\n                }\n\n                items.push(\n                <div className=\"cards\">\n                    <a href={classe.url} target=\"_blank\" rel=\"noopener noreferrer\">{classe.repo}</a>\n                    <p><b>Programming language: </b>{lang}</p>\n                    <p><b>Owner: </b>{classe.owner}</p>\n                    <p><b>Stars: </b>{classe.stars}</p>\n                </div>        \n                )\n            }\n        }\n    }\n\n    return (\n        <>\n            <div className=\"repoPage\">\n                <h1 className=\"repoTitle\">We've found 15 relevant repositories</h1>\n                <div className=\"grids\">{items}</div>\n            </div>\n        </>\n    )\n}\n\nexport default Repo;","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Home from './views/Home';\nimport Repo from './views/Repo';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Route path=\"/\" exact={true} component={Home}/>\n        <Route path=\"/repo\" component={Repo}/>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}