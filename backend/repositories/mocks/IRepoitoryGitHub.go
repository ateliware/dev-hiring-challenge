// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	models "desafio_ateliware/backend/models"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// IRepoitoryGitHub is an autogenerated mock type for the IRepoitoryGitHub type
type IRepoitoryGitHub struct {
	mock.Mock
}

// BuscarRepositorios provides a mock function with given fields: linguagem
func (_m *IRepoitoryGitHub) BuscarRepositorios(linguagem string) ([]models.Repositorio, error) {
	ret := _m.Called(linguagem)

	var r0 []models.Repositorio
	if rf, ok := ret.Get(0).(func(string) []models.Repositorio); ok {
		r0 = rf(linguagem)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Repositorio)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(linguagem)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExcluirRepositorios provides a mock function with given fields: linguagem
func (_m *IRepoitoryGitHub) ExcluirRepositorios(linguagem string) error {
	ret := _m.Called(linguagem)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(linguagem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SalvarRepositorios provides a mock function with given fields: _a0
func (_m *IRepoitoryGitHub) SalvarRepositorios(_a0 []models.Repositorio) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]models.Repositorio) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIRepoitoryGitHub creates a new instance of IRepoitoryGitHub. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRepoitoryGitHub(t testing.TB) *IRepoitoryGitHub {
	mock := &IRepoitoryGitHub{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
