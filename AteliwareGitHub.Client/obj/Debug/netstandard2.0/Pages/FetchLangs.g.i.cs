#pragma checksum "/Users/cleversongallego/Projects/Ateliware/AteliwareGitHub.Client/Pages/FetchLangs.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c310f1bd85119dbf6cca8e47489745e28f17b290"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace AteliwareGitHub.Client.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using Microsoft.JSInterop;
    using AteliwareGitHub.Client;
    using AteliwareGitHub.Client.Shared;
    using AteliwareGitHub.Shared;
    [Microsoft.AspNetCore.Blazor.Layouts.LayoutAttribute(typeof(MainLayout))]

    [Microsoft.AspNetCore.Blazor.Components.RouteAttribute("/fetchLangs")]
    public class FetchLangs : Microsoft.AspNetCore.Blazor.Components.BlazorComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 48 "/Users/cleversongallego/Projects/Ateliware/AteliwareGitHub.Client/Pages/FetchLangs.cshtml"
            
    LanguagesDTO[] languages;
    List<LanguagesDTO> langsSelected = new List<LanguagesDTO>();
    int qtdLangs = 0;
    List<string> langsuri = new List<string>();

    protected override async Task OnInitAsync()
    {
        languages = await Http.GetJsonAsync<LanguagesDTO[]>("api/GitHub/Languages");
        langsuri.Clear();
        langsSelected.Clear();
    }

    void LangSelectionChanged(UIChangeEventArgs e)
    {
        if (qtdLangs < 5)
        {
            var alreadypicked = from b in langsSelected
                                where b.name == e.Value.ToString()
                                select b;

            if (alreadypicked.Count() <= 0)
            {
                langsSelected.Add(new LanguagesDTO() { name = e.Value.ToString(), qtd = 0 });

                langsuri.Add("lang=" + e.Value.ToString());

                qtdLangs++;
            }
        }
    }

    void ClearResults()
    {
        langsSelected.Clear();
        qtdLangs = 0;
        langsuri.Clear();
    }

    async void GoForResults()
    {
        if (langsuri.Count() > 0)
        {
            string url = $"/fetchData/{string.Join("&", langsuri)}";

            uriHelper.NavigateTo(url);
        }
        else
        {
            await JsRuntime.InvokeAsync<bool>("utilJSFunctions.showMessage", "Select one language at least to proceed.");
        }
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Blazor.Components.InjectAttribute] private IJSRuntime JsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Blazor.Components.InjectAttribute] private Microsoft.AspNetCore.Blazor.Services.IUriHelper uriHelper { get; set; }
        [global::Microsoft.AspNetCore.Blazor.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
